{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\farha\\\\OneDrive\\\\Desktop\\\\TNS\\\\Client\\\\src\\\\pages\\\\BookAppointment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./styles/BookAppointment.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BookAppointment() {\n  _s();\n  const [services, setServices] = useState([]);\n  const [selectedService, setSelectedService] = useState(\"\");\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\n  const [appointmentTime, setAppointmentTime] = useState(\"\");\n  const [contactNumber, setContactNumber] = useState(\"\");\n  const [customerName, setCustomerName] = useState(\"\");\n  useEffect(() => {\n    const fetchServices = async () => {\n      const response = await axios.get(\"http://localhost:5000/api/services\");\n      setServices(response.data);\n    };\n    fetchServices();\n  }, []);\n  const handleAppointmentBooking = async e => {\n    e.preventDefault();\n\n    // Ensure all required fields are provided\n    if (!customerName || !contactNumber || !selectedService || !appointmentDate || !appointmentTime) {\n      alert(\"Please fill all fields.\");\n      return;\n    }\n    try {\n      // Log the data being sent for debugging\n      console.log({\n        customerName,\n        contactNumber,\n        service: selectedService,\n        appointmentDate,\n        appointmentTime\n      });\n      // Send the data to the backend API\n      const response = await axios.post(\"http://localhost:5000/api/appointments/add\", {\n        customerName,\n        contactNumber,\n        service: selectedService,\n        appointmentDate,\n        appointmentTime\n      });\n      alert(\"We will call you later to confirm the appointment.\");\n    } catch (error) {\n      console.error(\"Error booking appointment:\", error.response ? error.response.data : error);\n    }\n  };\n\n  // Add this function at the top of your component to format the time\n  const formatTime = time => {\n    if (!time) return '';\n    const [hours, minutes] = time.split(':');\n    const hour = parseInt(hours);\n    const ampm = hour >= 12 ? 'PM' : 'AM';\n    const formattedHour = hour % 12 || 12;\n    return `${formattedHour}:${minutes} ${ampm}`;\n  };\n\n  // Add this function to convert 12-hour format back to 24-hour format\n  const parseTime = timeStr => {\n    if (!timeStr) return '';\n    const [time, period] = timeStr.split(' ');\n    const [hours, minutes] = time.split(':');\n    let hour = parseInt(hours);\n    if (period === 'PM' && hour !== 12) hour += 12;\n    if (period === 'AM' && hour === 12) hour = 0;\n    return `${hour.toString().padStart(2, '0')}:${minutes}`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"booking-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-md-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"form-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fas fa-clock icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), \" Time\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control input-field time-picker\",\n            value: formatTime(appointmentTime),\n            onChange: e => {\n              const timeValue = e.target.value;\n              if (/^(1[0-2]|0?[1-9]):[0-5][0-9] (AM|PM)$/i.test(timeValue)) {\n                setAppointmentTime(parseTime(timeValue));\n              }\n            },\n            placeholder: \"11:30 AM\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"input-group-text\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fas fa-hourglass-start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(BookAppointment, \"jRkY2K0cv1FePjy8Vm66GkE0p28=\");\n_c = BookAppointment;\nexport default BookAppointment;\nvar _c;\n$RefreshReg$(_c, \"BookAppointment\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","BookAppointment","_s","services","setServices","selectedService","setSelectedService","appointmentDate","setAppointmentDate","appointmentTime","setAppointmentTime","contactNumber","setContactNumber","customerName","setCustomerName","fetchServices","response","get","data","handleAppointmentBooking","e","preventDefault","alert","console","log","service","post","error","formatTime","time","hours","minutes","split","hour","parseInt","ampm","formattedHour","parseTime","timeStr","period","toString","padStart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","timeValue","target","test","placeholder","required","_c","$RefreshReg$"],"sources":["C:/Users/farha/OneDrive/Desktop/TNS/Client/src/pages/BookAppointment.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./styles/BookAppointment.css\";\r\n\r\n\r\nfunction BookAppointment() {\r\n  const [services, setServices] = useState([]);\r\n  const [selectedService, setSelectedService] = useState(\"\");\r\n  const [appointmentDate, setAppointmentDate] = useState(\"\");\r\n  const [appointmentTime, setAppointmentTime] = useState(\"\");\r\n  const [contactNumber, setContactNumber] = useState(\"\");\r\n  const [customerName, setCustomerName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const fetchServices = async () => {\r\n      const response = await axios.get(\"http://localhost:5000/api/services\");\r\n      setServices(response.data);\r\n    };\r\n\r\n    fetchServices();\r\n  }, []);\r\n\r\n  const handleAppointmentBooking = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Ensure all required fields are provided\r\n    if (!customerName || !contactNumber || !selectedService || !appointmentDate || !appointmentTime) {\r\n      alert(\"Please fill all fields.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Log the data being sent for debugging\r\n    console.log({\r\n      customerName,\r\n      contactNumber,\r\n      service: selectedService,\r\n      appointmentDate,\r\n      appointmentTime,\r\n    });\r\n      // Send the data to the backend API\r\n      const response = await axios.post(\"http://localhost:5000/api/appointments/add\", {\r\n        customerName,\r\n        contactNumber,\r\n        service: selectedService,\r\n        appointmentDate,\r\n        appointmentTime,\r\n      });\r\n      alert(\"We will call you later to confirm the appointment.\");\r\n    } catch (error) {\r\n      console.error(\"Error booking appointment:\", error.response ? error.response.data : error);\r\n    }\r\n  };\r\n\r\n  // Add this function at the top of your component to format the time\r\n  const formatTime = (time) => {\r\n    if (!time) return '';\r\n    const [hours, minutes] = time.split(':');\r\n    const hour = parseInt(hours);\r\n    const ampm = hour >= 12 ? 'PM' : 'AM';\r\n    const formattedHour = hour % 12 || 12;\r\n    return `${formattedHour}:${minutes} ${ampm}`;\r\n  };\r\n\r\n  // Add this function to convert 12-hour format back to 24-hour format\r\n  const parseTime = (timeStr) => {\r\n    if (!timeStr) return '';\r\n    const [time, period] = timeStr.split(' ');\r\n    const [hours, minutes] = time.split(':');\r\n    let hour = parseInt(hours);\r\n    \r\n    if (period === 'PM' && hour !== 12) hour += 12;\r\n    if (period === 'AM' && hour === 12) hour = 0;\r\n    \r\n    return `${hour.toString().padStart(2, '0')}:${minutes}`;\r\n  };\r\n\r\n  return (\r\n    <div className=\"booking-container\">\r\n      {/* Previous code remains the same until the time input */}\r\n      \r\n      {/* Modified time input section */}\r\n      <div className=\"col-md-6\">\r\n        <div className=\"form-group\">\r\n          <label className=\"form-label\">\r\n            <i className=\"fas fa-clock icon\"></i> Time\r\n          </label>\r\n          <div className=\"input-group\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control input-field time-picker\"\r\n              value={formatTime(appointmentTime)}\r\n              onChange={(e) => {\r\n                const timeValue = e.target.value;\r\n                if (/^(1[0-2]|0?[1-9]):[0-5][0-9] (AM|PM)$/i.test(timeValue)) {\r\n                  setAppointmentTime(parseTime(timeValue));\r\n                }\r\n              }}\r\n              placeholder=\"11:30 AM\"\r\n              required\r\n            />\r\n            <span className=\"input-group-text\">\r\n              <i className=\"fas fa-hourglass-start\"></i>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Rest of the code remains the same */}\r\n    </div>\r\n  );\r\n}\r\nexport default BookAppointment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}